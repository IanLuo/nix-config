scriptencoding utf-8
set encoding=utf-8 nobomb

" disable compatibility with vi which cause unexpected issues.
set nocompatible

" enable type file detection vim will be able to try to detect the type of
" file in use.

filetype on

" enable plugins and load plugin for the detected file type
filetype plugin on

" load an indent file for the detected file type
filetype indent on

" turn syntax highlighting on
syntax on

" show exiting tab with 2 spaces
:set shiftwidth=2

" when indent with >, use 2 spaces
:set tabstop=2

" On pressing tab, inser 2 spaces
:set expandtab

" Show line numbers
:set number

:set autoindent

" highlight cursor line underneath the cursor horizontally
set cursorline

" do not backup files
set nobackup

" while searching though a file incrementally hightlight matching characters
" as you type
set incsearch

" do not wrap
set nowrap

" ignore capital letters during search
set ignorecase

" override the ignore case option if searching for capital letters
" this will allow you to search specifically for capital letters
set smartcase

" show partial command you type in the last line of the screen
set showcmd

" show the mode you are on last line
set showmode

" show matching works during a search
set showmatch

" show lightlighting when doing a search
set hlsearch

" set the commands to save in history default number is 20
set history=1000

" ignore files for vim
set wildignore=*.docx,*.jgp,*.gif,*.pdf,*.pyc,*.exe,*.img,*.xlsx

set foldmethod=marker

set list

"Wilder.vim {{{
" enable auto completion menu after pressing TAB
set wildmenu

"make wildmenu behave like similar to bash completion
set wildmode=list:longest


packadd! nvim-colorizer.lua
lua require 'colorizer'.setup()

set listchars=tab:→\ ,space:·,nbsp:␣,trail:•,eol:¶,precedes:«,extends:»
if &diff
  colorscheme blue
endif

"  wilder.vim
call wilder#setup({'modes':[':', '/', '?']})
call wilder#set_option('renderer', wilder#popupmenu_renderer({
      \ 'highlighter': wilder#basic_highlighter(),
      \ 'left': [
      \   ' ', wilder#popupmenu_devicons(),
      \ ],
      \ 'right': [
      \   ' ', wilder#popupmenu_scrollbar(),
      \ ],
      \ }))
"}}}

" Formatter {{{
" formatter
" format on save
augroup FormatAutogroup
  autocmd!
  autocmd BufWritePost * FormatWrite
augroup END

nnoremap <silent> <leader>f :Format<CR>
nnoremap <silent> <leader>F :FormatWrite<CR>

lua << EOF
-- Utilities for creating configurations
local util = require "formatter.util"

-- Provides the Format, FormatWrite, FormatLock, and FormatWriteLock commands
require("formatter").setup {
  -- Enable or disable logging
  logging = true,
  -- Set the log level
  log_level = vim.log.levels.WARN,
  -- All formatter configurations are opt-in
  filetype = {
    -- Formatter configurations for filetype "lua" go here
    -- and will be executed in order
    lua = {
      -- "formatter.filetypes.lua" defines default configurations for the
      -- "lua" filetype
      require("formatter.filetypes.lua").stylua,

      -- You can also define your own configuration
      function()
        -- Supports conditional formatting
        if util.get_current_buffer_file_name() == "special.lua" then
          return nil
        end

        -- Full specification of configurations is down below and in Vim help
        -- files
        return {
          exe = "stylua",
          args = {
            "--search-parent-directories",
            "--stdin-filepath",
            util.escape_path(util.get_current_buffer_file_path()),
            "--",
            "-",
          },
          stdin = true,
        }
      end
    },

    -- Use the special "*" filetype for defining formatter configurations on
    -- any filetype
    ["*"] = {
      -- "formatter.filetypes.any" defines default configurations for any
      -- filetype
      require("formatter.filetypes.any").remove_trailing_whitespace
    }
  }
}
EOF
" }}}

" STATUS {{{

set statusline=

" status line left side
set statusline+=\ %F\ %M\ %Y\ %R

" use a divider to separate the left side from the right side
set statusline+=%=

" status line right side
set statusline+=\ %l\ C:\ %c\ t:\ %p%%

" show the status on the second to last line
set laststatus=2

" }}}

"KEYMAP {{{
nnoremap <silent> <C-p> :FZF<CR>
"}}}
